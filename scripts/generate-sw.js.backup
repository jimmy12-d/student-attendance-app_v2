const fs = require('fs');
const path = require('path');

// Path to your .env.local file
const envPath = path.resolve(process.cwd(), '.env.local');

// Read the .env.local file
if (fs.existsSync(envPath)) {
    const envFileContent = fs.readFileSync(envPath, 'utf8');
    
    // Parse the .env file content
    envFileContent.split('\n').forEach(line => {
        if (line && line.includes('=') && !line.startsWith('#')) {
            const equalIndex = line.indexOf('=');
            const key = line.slice(0, equalIndex).trim();
            const value = line.slice(equalIndex + 1).trim();
            
            // Remove quotes if present
            const cleanValue = value.replace(/^["']|["']$/g, '');
            
            // Set the environment variable if it's not already set
            if (key && cleanValue && !process.env[key]) {
                process.env[key] = cleanValue;
            }
        }
    });
} else {
    console.warn(".env.local file not found. Using system environment variables.");
}


const swTemplate = `
// This file is generated by scripts/generate-sw.js
importScripts('https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/9.23.0/firebase-messaging-compat.js');

const firebaseConfig = {
  apiKey: "${process.env.NEXT_PUBLIC_FIREBASE_API_KEY}",
  authDomain: "${process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}",
  projectId: "${process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID}",
  storageBucket: "${process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET}",
  messagingSenderId: "${process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID}",
  appId: "${process.env.NEXT_PUBLIC_FIREBASE_APP_ID}",
  measurementId: "${process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID}"
};

// Check if Firebase messaging is supported
if ('serviceWorker' in navigator && 'PushManager' in window && firebaseConfig.apiKey && firebaseConfig.apiKey !== "undefined") {
    try {
        self.firebase.initializeApp(firebaseConfig);
        
        const messaging = self.firebase.messaging();
        
        messaging.onBackgroundMessage((payload) => {
          console.log('[firebase-messaging-sw.js] Received background message ', payload);
          
          const notificationTitle = payload.notification?.title || 'New Notification';
          const notificationOptions = {
            body: payload.notification?.body || '',
            icon: payload.notification?.icon || '/favicon.png',
            badge: '/favicon.png',
            tag: payload.data?.notificationId || 'default',
            renotify: true,
            requireInteraction: false,
            data: payload.data || {}
          };
        
          self.registration.showNotification(notificationTitle, notificationOptions);
        });

        // Handle notification clicks
        self.addEventListener('notificationclick', (event) => {
          console.log('[firebase-messaging-sw.js] Notification click received.', event);
          
          event.notification.close();
          
          // Get the URL to open (default to student notifications page)
          const urlToOpen = event.notification.data?.url || '/student/notifications';
          
          // Check if any window/tab is already open with this URL
          event.waitUntil(
            self.clients.matchAll({ type: 'window', includeUncontrolled: true }).then((clientList) => {
              // If a window/tab is already open with the target URL, focus it
              for (const client of clientList) {
                if (client.url.includes(urlToOpen) && 'focus' in client) {
                  return client.focus();
                }
              }
              
              // If no window/tab is open with the target URL, open a new one
              if (self.clients.openWindow) {
                const baseUrl = self.location.origin;
                return self.clients.openWindow(baseUrl + urlToOpen);
              }
            })
          );
        });
        
        console.log('[firebase-messaging-sw.js] Firebase messaging initialized successfully');
    } catch (error) {
        console.error('[firebase-messaging-sw.js] Error initializing Firebase messaging:', error);
    }
} else {
    console.error('[firebase-messaging-sw.js] Firebase messaging is not supported or config is invalid');
}
`;

const outputPath = path.resolve(process.cwd(), 'public/firebase-messaging-sw.js');
fs.writeFileSync(outputPath, swTemplate.trim());

console.log('Service worker with environment variables generated successfully!'); 