"use client";

import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import Head from 'next/head';
import { toast } from 'sonner';
import { getAuth } from 'firebase/auth';
import { doc, getDoc, updateDoc, collection, query, where, getDocs, addDoc } from 'firebase/firestore';
import { db } from '../../../firebase-config';

import { mdiFaceRecogn  console.log('📚 Sorted unenrolled students:', sortedUnenrolledStudents.length);
  console.log('📋 Sample students with fields:', students.slice(0, 3).map(s => ({ 
    id: s.id, 
    fullName: s.fullName, 
    shift: s.shift,
    rollNumber: s.rollNumber,
    enrolled: !!s.faceId 
  })));rom '@mdi/js';
import SectionMain from "../../_components/Section/Main";
import SectionTitleLineWithButton from "../../_components/Section/TitleLineWithButton";
import CardBox from "../../_components/CardBox";
import { getPageTitle } from "../../_lib/config";
import LoadingSpinner from '../../_components/LoadingSpinner';

// FaceIO TypeScript declarations
declare global {
  // FaceIO is available as a global function, not on window object
  var faceIO: any;
}

interface Student {
  id: string;
  fullName: string;
  email: string;
  faceId?: string;
  class?: string;
  rollNumber?: string;
  shift?: string;
}

interface AttendanceRecord {
  studentId: string;
  studentName: string;
  date: string;
  timeIn?: string;
  status: 'present' | 'late' | 'absent';
  method: 'faceio' | 'manual' | 'qr' | 'legacy-face';
  timestamp: any;
}

const FaceIOAttendanceScanner = () => {
  const [faceio, setFaceio] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [loadingMessage, setLoadingMessage] = useState('Initializing FaceIO...');
  const [isEnrolling, setIsEnrolling] = useState(false);
  const [isRecognizing, setIsRecognizing] = useState(false);
  const [students, setStudents] = useState<Student[]>([]);
  const [selectedStudent, setSelectedStudent] = useState<string>('');
  const [showEnrollment, setShowEnrollment] = useState(false);
  const audioRef = useRef<HTMLAudioElement | null>(null);

  // Initialize success sound
  useEffect(() => {
    audioRef.current = new Audio('/success_sound_2.mp3');
  }, []);

  const playSuccessSound = () => {
    if (audioRef.current) {
      audioRef.current.play().catch(e => console.error("Error playing sound:", e));
    }
  };

  // Initialize FaceIO
  useEffect(() => {
    const initializeFaceIO = async () => {
      try {
        setLoadingMessage('Loading FaceIO SDK...');
        
        // Load FaceIO script if not already loaded
        // @ts-ignore
        if (typeof faceIO === 'undefined') {
          // Check if script is already in DOM
          const existingScript = document.querySelector('script[src="https://cdn.faceio.net/fio.js"]');
          
          if (!existingScript) {
            const script = document.createElement('script');
            script.src = 'https://cdn.faceio.net/fio.js';
            script.async = true;
            document.head.appendChild(script);
            
            await new Promise((resolve, reject) => {
              script.onload = () => {
                // Wait for FaceIO to be available in global scope
                const checkFaceIO = () => {
                  // @ts-ignore
                  if (typeof faceIO !== 'undefined') {
                    resolve(true);
                  } else {
                    setTimeout(checkFaceIO, 100);
                  }
                };
                checkFaceIO();
              };
              script.onerror = reject;
            });
          } else {
            // Script exists, wait for global faceIO to be available
            await new Promise((resolve) => {
              const checkFaceIO = () => {
                // @ts-ignore
                if (typeof faceIO !== 'undefined') {
                  resolve(true);
                } else {
                  setTimeout(checkFaceIO, 100);
                }
              };
              checkFaceIO();
            });
          }
        }

        setLoadingMessage('Initializing FaceIO application...');
        
        // Check if FaceIO is available in global scope (not on window object)
        // @ts-ignore
        if (typeof faceIO === 'undefined') {
          throw new Error('FaceIO library not loaded properly');
        }
        
        // Initialize FaceIO with your app ID from environment variable
        // @ts-ignore
        const faceioInstance = new faceIO(process.env.NEXT_PUBLIC_FACEIO_APP_ID);
        
        setFaceio(faceioInstance);
        setIsLoading(false);
        setLoadingMessage('');
        
        console.log('FaceIO initialized successfully');
        toast.success('FaceIO ready for use');
        
      } catch (error) {
        console.error('Failed to initialize FaceIO:', error);
        setLoadingMessage('Failed to initialize FaceIO');
        toast.error('Failed to initialize FaceIO');
      }
    };

    initializeFaceIO();
  }, []);

  // Load students from Firestore
  useEffect(() => {
    const loadStudents = async () => {
      try {
        console.log('🔍 Loading students from Firestore...');
        const studentsRef = collection(db, 'students');
        const snapshot = await getDocs(studentsRef);
        console.log('📊 Firestore snapshot size:', snapshot.size);
        
        const studentsData = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        })) as Student[];
        
        console.log('👥 Students loaded:', studentsData.length);
        console.log('📝 First few students:', studentsData.slice(0, 3));
        
        setStudents(studentsData);
        
        if (studentsData.length === 0) {
          toast.error('No students found in database. Please add students first.');
        }
      } catch (error) {
        console.error('❌ Error loading students:', error);
        toast.error('Failed to load students');
      }
    };

    loadStudents();
  }, []);

  // Enroll new face
  const handleEnrollment = useCallback(async () => {
    if (!faceio || !selectedStudent) {
      toast.error('Please select a student and ensure FaceIO is loaded');
      return;
    }

    setIsEnrolling(true);
    
    try {
      const student = students.find(s => s.id === selectedStudent);
      if (!student) {
        throw new Error('Selected student not found');
      }

      toast.info('Look at the camera to enroll your face...');
      
      // Enroll user with FaceIO
      const userInfo = await faceio.enroll({
        locale: "auto",
        payload: {
          studentId: student.id,
          email: student.email,
          name: student.fullName,
          enrolledAt: new Date().toISOString()
        }
      });

      console.log('FaceIO enrollment successful:', userInfo);

      // Update student record in Firestore with Face ID
      const studentRef = doc(db, 'students', student.id);
      await updateDoc(studentRef, {
        faceId: userInfo.facialId,
        faceioEnrolledAt: new Date(),
        faceioData: {
          facialId: userInfo.facialId,
          timestamp: userInfo.timestamp,
          enrolledAt: new Date().toISOString()
        }
      });

      // Update local state
      setStudents(prev => prev.map(s => 
        s.id === student.id 
          ? { ...s, faceId: userInfo.facialId }
          : s
      ));

      playSuccessSound();
      toast.success(`Face enrolled successfully for ${student.fullName}`);
      setSelectedStudent('');
      setShowEnrollment(false);

    } catch (error: any) {
      console.error('Enrollment failed:', error);
      let errorMessage = 'Enrollment failed';
      
      if (error.code === 4) {
        errorMessage = 'User already enrolled. Please use recognition instead.';
      } else if (error.code === 2) {
        errorMessage = 'No face detected. Please ensure good lighting and look at camera.';
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      toast.error(errorMessage);
    } finally {
      setIsEnrolling(false);
    }
  }, [faceio, selectedStudent, students]);

  // Recognize face and mark attendance
  const handleRecognition = useCallback(async () => {
    if (!faceio) {
      toast.error('FaceIO not initialized');
      return;
    }

    setIsRecognizing(true);
    
    try {
      toast.info('Look at the camera for attendance...');
      
      // Authenticate user with FaceIO
      const userData = await faceio.authenticate({
        locale: "auto"
      });

      console.log('FaceIO recognition successful:', userData);

      // Find student by Face ID
      const student = students.find(s => s.faceId === userData.facialId);
      
      if (!student) {
        throw new Error('Student not found in database');
      }

      // Check if already marked today
      const today = new Date().toDateString();
      const attendanceRef = collection(db, 'attendance');
      const attendanceQuery = query(
        attendanceRef,
        where('studentId', '==', student.id),
        where('date', '==', today)
      );
      
      const attendanceSnapshot = await getDocs(attendanceQuery);
      
      if (!attendanceSnapshot.empty) {
        const existingRecord = attendanceSnapshot.docs[0].data();
        toast.warning(`${student.fullName} already marked ${existingRecord.status} today`);
        playSuccessSound();
        return;
      }

      // Determine attendance status based on time
      const now = new Date();
      const timeString = now.toLocaleTimeString([], { 
        hour: '2-digit', 
        minute: '2-digit', 
        hour12: true 
      });
      
      // You can adjust these time thresholds as needed
      const cutoffTime = new Date();
      cutoffTime.setHours(8, 30, 0, 0); // 8:30 AM cutoff for late
      
      const status = now > cutoffTime ? 'late' : 'present';

      // Create attendance record
      const attendanceRecord: AttendanceRecord = {
        studentId: student.id,
        studentName: student.fullName,
        date: today,
        timeIn: timeString,
        status: status,
        method: 'faceio',
        timestamp: new Date()
      };

      // Save to Firestore
      await addDoc(collection(db, 'attendance'), attendanceRecord);

      // Show success message
      const message = `${student.fullName} marked ${status} at ${timeString}`;
      
      if (status === 'late') {
        toast.warning(message);
      } else {
        toast.success(message);
      }
      
      playSuccessSound();

    } catch (error: any) {
      console.error('Recognition failed:', error);
      let errorMessage = 'Recognition failed';
      
      if (error.code === 2) {
        errorMessage = 'No face detected. Please ensure good lighting and look at camera.';
      } else if (error.code === 9) {
        errorMessage = 'Face not recognized. Please enroll first or try again.';
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      toast.error(errorMessage);
    } finally {
      setIsRecognizing(false);
    }
  }, [faceio, students]);

  const enrolledStudents = students.filter(s => s.faceId);
  const unenrolledStudents = students.filter(s => !s.faceId);
  
  // Sort unenrolled students by shift (morning first) and then by name
  const sortedUnenrolledStudents = useMemo(() => {
    return unenrolledStudents
      .slice() // Create a copy to avoid mutating original array
      .sort((a, b) => {
        // First sort by shift (morning first)
        const shiftA = a.shift?.toLowerCase() || 'unknown';
        const shiftB = b.shift?.toLowerCase() || 'unknown';
        
        if (shiftA === 'morning' && shiftB !== 'morning') return -1;
        if (shiftB === 'morning' && shiftA !== 'morning') return 1;
        if (shiftA === 'afternoon' && shiftB === 'evening') return -1;
        if (shiftB === 'afternoon' && shiftA === 'evening') return 1;
        
        // Then sort by name within same shift
        const nameA = a.fullName || '';
        const nameB = b.fullName || '';
        return nameA.localeCompare(nameB);
      });
  }, [unenrolledStudents]);

  // Debug logging
  console.log('👥 Total students:', students.length);
  console.log('✅ Enrolled students:', enrolledStudents.length);
  console.log('⏳ Unenrolled students:', unenrolledStudents.length);
  console.log('� Sorted unenrolled students:', sortedUnenrolledStudents.length);
  console.log('�📋 Sample students with fields:', students.slice(0, 3).map(s => ({ 
    id: s.id, 
    firstName: s.firstName, 
    lastName: s.lastName, 
    shift: s.shift,
    rollNumber: s.rollNumber,
    enrolled: !!s.faceId 
  })));
  console.log('🔍 Shift distribution:', students.reduce((acc, s) => {
    const shift = s.shift || 'unknown';
    acc[shift] = (acc[shift] || 0) + 1;
    return acc;
  }, {} as Record<string, number>));

  return (
    <CardBox>
      <div className="space-y-6 p-6">
        
        {/* Status Section */}
        <div className="bg-blue-50 p-4 rounded-lg">
          <h3 className="text-lg font-semibold text-blue-800 mb-2">FaceIO Attendance System</h3>
          <p className="text-blue-600">
            Advanced facial recognition powered by FaceIO. Students need to enroll once before using recognition.
          </p>
          
          {isLoading && (
            <div className="mt-3 flex items-center text-blue-600">
              <LoadingSpinner />
              <span className="ml-2">{loadingMessage}</span>
            </div>
          )}
        </div>

        {/* Recognition Section */}
        {!isLoading && (
          <div className="grid md:grid-cols-2 gap-6">
            
            {/* Attendance Recognition */}
            <div className="space-y-4">
              <h4 className="text-lg font-semibold">Mark Attendance</h4>
              <p className="text-gray-600">Click the button below and look at your camera to mark attendance.</p>
              
              <button
                onClick={handleRecognition}
                disabled={isRecognizing || isEnrolling}
                className={`w-full px-6 py-4 font-semibold rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-opacity-75 transition duration-150 ease-in-out ${
                  isRecognizing || isEnrolling
                    ? 'bg-gray-400 text-white cursor-not-allowed'
                    : 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-400'
                }`}
              >
                {isRecognizing ? (
                  <div className="flex items-center justify-center">
                    <LoadingSpinner />
                    <span className="ml-2">Recognizing...</span>
                  </div>
                ) : (
                  'Start Attendance Recognition'
                )}
              </button>
              
              <div className="text-sm text-gray-500">
                <p>• Ensure good lighting</p>
                <p>• Look directly at the camera</p>
                <p>• Remove glasses if recognition fails</p>
              </div>
            </div>

            {/* Face Enrollment */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h4 className="text-lg font-semibold">Face Enrollment</h4>
                <button
                  onClick={() => setShowEnrollment(!showEnrollment)}
                  className="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
                >
                  {showEnrollment ? 'Hide' : 'Show'} Enrollment
                </button>
              </div>
              
              {showEnrollment && (
                <div className="space-y-3">
                  <p className="text-gray-600">New students must enroll their face before using attendance recognition.</p>
                  
                  {students.length === 0 ? (
                    <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                      <p className="text-yellow-800 font-semibold">⚠️ No students found</p>
                      <p className="text-yellow-700 text-sm mt-1">
                        No students are available in the database. Please add students to the system first.
                      </p>
                      <button
                        onClick={() => window.location.href = '/dashboard/students'}
                        className="mt-2 px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700"
                      >
                        Go to Students Page
                      </button>
                    </div>
                  ) : unenrolledStudents.length === 0 ? (
                    <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                      <p className="text-green-800 font-semibold">✅ All students enrolled</p>
                      <p className="text-green-700 text-sm mt-1">
                        All students in the database have been enrolled with FaceIO.
                      </p>
                    </div>
                  ) : (
                    <>
                      <select
                        value={selectedStudent}
                        onChange={(e) => setSelectedStudent(e.target.value)}
                        className="w-full p-3 border border-gray-300 rounded-lg"
                        disabled={isEnrolling || isRecognizing}
                      >
                        <option value="">Select a student to enroll ({sortedUnenrolledStudents.length} available)</option>
                        {sortedUnenrolledStudents.map(student => {
                          const displayName = `${student.firstName || 'No Name'} ${student.lastName || ''}`.trim();
                          const rollNumber = student.rollNumber ? `(${student.rollNumber})` : '';
                          const shift = student.shift ? `[${student.shift}]` : '[No Shift]';
                          return (
                            <option key={student.id} value={student.id}>
                              {shift} {displayName} {rollNumber}
                            </option>
                          );
                        })}
                      </select>

                      <button
                        onClick={handleEnrollment}
                        disabled={!selectedStudent || isEnrolling || isRecognizing}
                        className={`w-full px-6 py-3 font-semibold rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-opacity-75 transition duration-150 ease-in-out ${
                          !selectedStudent || isEnrolling || isRecognizing
                            ? 'bg-gray-400 text-white cursor-not-allowed'
                            : 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-400'
                        }`}
                      >
                        {isEnrolling ? (
                          <div className="flex items-center justify-center">
                            <LoadingSpinner />
                            <span className="ml-2">Enrolling Face...</span>
                          </div>
                        ) : (
                          'Enroll Selected Student'
                        )}
                      </button>
                    </>
                  )}
                </div>
              )}
            </div>
          </div>
        )}

        {/* Statistics */}
        {!isLoading && (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 pt-6 border-t">
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">{enrolledStudents.length}</div>
              <div className="text-sm text-gray-600">Enrolled</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">{unenrolledStudents.length}</div>
              <div className="text-sm text-gray-600">Pending</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">{students.length}</div>
              <div className="text-sm text-gray-600">Total Students</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">FaceIO</div>
              <div className="text-sm text-gray-600">Technology</div>
            </div>
          </div>
        )}

        {/* Enrolled Students List */}
        {!isLoading && enrolledStudents.length > 0 && (
          <div className="mt-6">
            <h4 className="text-lg font-semibold mb-3">Enrolled Students ({enrolledStudents.length})</h4>
            <div className="bg-gray-50 rounded-lg p-4 max-h-40 overflow-y-auto">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                {enrolledStudents.map(student => (
                  <div key={student.id} className="flex items-center space-x-2 text-sm">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>{student.firstName} {student.lastName}</span>
                    {student.rollNumber && (
                      <span className="text-gray-500">({student.rollNumber})</span>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* Required FaceIO modal container */}
      <div id="faceio-modal"></div>
    </CardBox>
  );
};

export default function FaceIOAttendancePage() {
  return (
    <>
      <Head>
        <title>{getPageTitle('FaceIO Attendance')}</title>
      </Head>
      <SectionMain>
        <SectionTitleLineWithButton 
          icon={mdiFaceRecognition} 
          title="FaceIO Attendance System" 
          main 
        />
        <FaceIOAttendanceScanner />
      </SectionMain>
    </>
  );
}
