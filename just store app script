// ==> IMPORTANT <==
// 1. Replace this with your actual secret key
const SECRET_KEY = "jsNPWKOrDtmQdmrs9F8brzcEV9aSW34r7baiq1f74julcLcuZl2WXmzNEQ4C23Mo"; 
// 2. Replace this with the name of the sheet that has student registration status and seat numbers
const REGISTRATION_SHEET_NAME = "Validate"; 

// Helper function to create a standardized JSON response with CORS headers
function createJsonResponse(data) {
  const output = ContentService
    .createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON)
    .withHeaders({
      'Access-Control-Allow-Origin': 'https://portal.rodwell.center'
    });
  
  return output;
}

// Main function that handles all GET requests
function doGet(e) {
  const studentId = e.parameter.student_id;
  const secret = e.parameter.secret;
  const examName = e.parameter.exam_name;

  if (secret !== SECRET_KEY) {
    return createJsonResponse({ error: "Invalid secret key" });
  }
  if (!studentId) {
    return createJsonResponse({ error: "student_id parameter is missing" });
  }

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let responseData;

  try {
    // ROUTE 1: Get exam scores if examName is provided
    if (examName) {
      responseData = getExamScores(ss, examName, studentId);
    } 
    // ROUTE 2: Get registration status if no examName is provided
    else {
      responseData = getRegistrationStatus(ss, studentId);
    }
    return createJsonResponse(responseData);

  } catch (error) {
    // Catch any unexpected errors
    return createJsonResponse({ error: `An error occurred: ${error.toString()}` });
  }
}

// Fetches scores from a specific exam sheet (e.g., "mock 1", "mock 2")
function getExamScores(spreadsheet, sheetName, studentId) {
  const sheet = spreadsheet.getSheetByName(sheetName);
  if (!sheet) {
    return { error: `Sheet named '${sheetName}' not found.` };
  }

  const data = sheet.getDataRange().getValues();
  const headers = data[0].map(h => String(h).toLowerCase().trim());
  
  const studentIdColIndex = headers.indexOf('id'); 

  if (studentIdColIndex === -1) {
    return { error: `Could not find 'id' column in the header of sheet: '${sheetName}'` };
  }
  
  const studentRow = data.slice(1).find(row => row[studentIdColIndex] == studentId);

  if (studentRow) {
    const scores = {};
    const subjectsInOrder = [];
    
    headers.forEach((subject, index) => {
      if (subject && !['class', 'full name', 'id'].includes(subject)) {
        scores[subject] = studentRow[index] || 0;
        subjectsInOrder.push(subject);
      }
    });

    return { scores: scores, subjects: subjectsInOrder };
  } else {
    return { scores: {}, subjects: [] };
  }
}

// Fetches registration status and seat from your main registration sheet
function getRegistrationStatus(spreadsheet, studentId) {
  const sheet = spreadsheet.getSheetByName(REGISTRATION_SHEET_NAME);
   if (!sheet) {
    return { error: `Sheet named '${REGISTRATION_SHEET_NAME}' not found.` };
  }
  
  const ID_COLUMN_NAME = "id";
  const STATUS_COLUMN_NAME = "status";
  const SEAT_COLUMN_NAME = "seat";

  const data = sheet.getDataRange().getValues();
  const headers = data[0].map(h => String(h).toLowerCase().trim());
  
  const idCol = headers.indexOf(ID_COLUMN_NAME);
  const statusCol = headers.indexOf(STATUS_COLUMN_NAME);
  const seatCol = headers.indexOf(SEAT_COLUMN_NAME);

  if (idCol === -1 || statusCol === -1 || seatCol === -1) {
    return { error: `One or more required columns ('id', 'status', 'seat') not found in '${REGISTRATION_SHEET_NAME}' sheet.` };
  }
  
  const studentRow = data.slice(1).find(row => row[idCol] == studentId);

  if (studentRow) {
    return {
      status: studentRow[statusCol],
      seat: studentRow[seatCol]
    };
  } else {
    return { status: "Not Registered", seat: null };
  }
}