rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTION ---
    // Checks if the user is an admin.
    function isAuthorizedUser() {
      return request.auth != null &&
          exists(/databases/$(database)/documents/authorizedUsers/$(request.auth.token.email));
    }

    // --- COLLECTION RULES ---

    match /students/{studentId} {
      // READ: An admin or the student owner can read.
      allow read: if isAuthorizedUser() || (request.auth != null && request.auth.uid == resource.data.authUid);

      // CREATE/DELETE: Only admins can create or delete student records.
      allow create, delete: if isAuthorizedUser();
      
      // UPDATE: An admin can update anything. A user can update a record
      // ONLY to link their authUid for the first time.
      allow update: if isAuthorizedUser() ||
                     (request.auth != null &&
                      resource.data.authUid == '' &&
                      request.resource.data.authUid == request.auth.uid);
    }

//     match /attendance/{attendanceId} {
//       // Only admins can create or update attendance records.
//       allow write: if isAuthorizedUser();
      
//       // An admin can read any record.
//       // A student can read their OWN attendance records.
//       // IMPORTANT: This requires your 'attendance' documents to have an 'authUid' field.
//       allow read: if isAuthorizedUser() || (request.auth.uid == resource.data.authUid);
//     }
    match /attendance/{attendanceId} {
      // Only admins can create or update attendance records.
      allow write: if isAuthorizedUser();
      
      // An admin can read any record.
      // A student can read their OWN attendance records.
      // IMPORTANT: This requires your 'attendance' documents to have an 'authUid' field.
      allow read: if true;
    }

    match /classes/{classId} {
      // Only admins can manage class data.
      allow write: if isAuthorizedUser();
      allow read: if request.auth != null;
    }
    
    match /examSettings/{settingId} {
      // Allow any authenticated user to read exam settings.
      allow write: if isAuthorizedUser();
  		allow read: if true; // Changed to allow read by everyone
    }
    
  	match /mockExam3/{examId} {
      // Allow any authenticated user to read exam settings.
      allow write: if isAuthorizedUser();
  		allow read: if true; // Changed to allow read by everyone
    }
    
    match /examControls/{controlsId} {
      // Allow any authenticated user to read exam settings.
      allow write: if isAuthorizedUser();
      allow read: if request.auth != null;
    }
    
    match /users/{userId}/notifications/{notificationId} {
      // Allow a user to read and write their own notification statuses, but not anyone else's.
      allow read, write: if request.auth.uid == userId;
    }

    match /notifications/{notificationId} {
      // This rule is correct and should stay.
      allow read: if request.auth != null;
      // You may want to restrict write access to admins.
      allow write: if isAuthorizedUser(); 
    }
    
    match /financePW/{financePWId} {
      allow read: if isAuthorizedUser(); 
    }

    
    match /permissions/{permissionId} {
      // Admins can update permissions (approve/deny).
      allow update: if isAuthorizedUser();
      
      // An admin or the student who owns it can read a permission request.
      // IMPORTANT: This requires your 'permissions' documents to have an 'authUid' field.
      allow read: if isAuthorizedUser() || (request.auth.uid == resource.data.authUid);
      
      // A student can create a permission request for themselves.
      // This rule ensures the 'authUid' in the new document matches the person creating it.
      allow create: if true;
    }

    match /authorizedUsers/{userEmail} {
      // A user can only read their own authorization status.
      allow get: if request.auth != null && request.auth.token.email == userEmail;
      // Nobody can modify the admin list from the app.
      allow list, create, update, delete: if false;
    }
    
    match /documents/{documentId} {
      // READ: Authenticated users can read document metadata.
      allow read: if request.auth != null;
      
      // CREATE: Authenticated users can upload new documents.
      // In production, you might want to restrict this to admins only.
      allow create: if request.auth != null;
      
      // UPDATE/DELETE: Only admins can modify or delete documents.
      allow update, delete: if isAuthorizedUser();
    }
    
    match /teachers/{teacherId} {
      // READ: Only authenticated users can read teacher information
      // Now that we have Cloud Functions, we don't need unauthenticated access
      allow read: if request.auth != null;
      
      // CREATE/UPDATE/DELETE: Only admins can manage teacher records
      allow create, update, delete: if isAuthorizedUser();
    }
    
    match /appSettings/{appSettingId} {
      // READ: Authenticated users can read document metadata.
      allow read: if request.auth != null;
      
      allow write: if isAuthorizedUser();
    }
    
    match /classTypes/{classTypesId} {
      // READ: Authenticated users can read document metadata.
      allow read, write: if isAuthorizedUser();
    }
        
    match /transactions/{transactionsId} {
      // READ: Authenticated users can read document metadata.
      allow read: if request.auth != null;
      
      allow write: if isAuthorizedUser();
    }
    
    match /processedAbaTransactions/{transactionId} {
      allow read: if isAuthorizedUser() || request.auth == null;
      allow write: if false;
    }
    
    match /tempRegistrationTokens/{tempRegistrationTokensId} {
      allow write, read: if isAuthorizedUser();
    }

    match /printRequests/{requestId} {
      // READ: Authenticated users can read their own requests, admins can read all.
      allow read: if request.auth != null && 
                     (isAuthorizedUser() || request.auth.uid == resource.data.requestedBy);
      
      // CREATE: Authenticated users can create print requests.
      allow create: if request.auth != null;
      
      // UPDATE: Only admins can update print requests (for approval/rejection).
      allow update: if isAuthorizedUser();
      
      // DELETE: Only admins can delete print requests.
      allow delete: if isAuthorizedUser();
    }
    
    match /absentFollowUps/{absentFollowUpId} {
      // READ/WRITE: Only admins can access absent follow-up records.
      allow read, write: if isAuthorizedUser();
    }
    
    match /mockResults/{phoneId} {
      // READ: Authenticated users (teachers/admins) can read student mock results
      allow read: if request.auth != null;
      
      // WRITE: Authenticated users (teachers/admins) can update mock results
      allow write: if request.auth != null;
    }
  }
}